<!-- livebook:{"persist_outputs":true} -->

# Advent of Code Day 2

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1.5"}
])
```

## Part 1

<!-- livebook:{"attrs":{"assign_to":"puzzle_input","day":"2","session_secret":"AOC_SESSION","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2023", "2", System.fetch_env!("LB_AOC_SESSION"))
```

<!-- livebook:{"output":true} -->

```
{:ok,
 "Game 1: 14 green, 8 blue, 9 red; 5 blue, 4 green, 2 red; 4 red, 4 blue, 4 green; 1 blue, 3 green, 2 red; 10 red, 3 blue, 15 green; 2 red, 6 green, 3 blue\nGame 2: 1 red, 12 green, 2 blue; 2 green, 1 blue, 1 red; 4 green, 2 blue; 10 green, 3 blue; 4 green, 2 red, 2 blue\nGame 3: 16 red, 3 green; 7 green, 15 red, 3 blue; 4 green, 20 red, 1 blue; 12 red, 13 green, 1 blue; 2 green, 8 red, 1 blue; 16 red, 7 green\nGame 4: 3 red, 7 blue; 4 blue, 3 green; 19 blue, 1 red, 3 green; 16 blue, 4 red, 5 green; 1 red, 19 blue, 3 green\nGame 5: 7 blue, 4 red, 6 green; 2 red, 3 green, 6 blue; 11 blue, 1 red, 5 green\nGame 6: 7 red, 13 blue; 2 green, 9 red, 7 blue; 7 green, 3 red, 12 blue; 11 green, 3 blue, 4 red; 12 green, 10 blue\nGame 7: 2 green, 5 red; 4 green, 1 blue, 3 red; 1 blue, 1 green, 18 red; 4 green, 12 red, 1 blue\nGame 8: 12 red, 9 green, 11 blue; 13 blue, 1 red, 16 green; 12 blue, 12 green; 3 green, 7 blue, 2 red\nGame 9: 1 green, 9 red, 9 blue; 4 blue, 2 red; 17 red, 6 green, 3 blue; 3 green, 1 blue, 12 red\nGame 10: 2 blue, 11 red, 3 green; 4 blue, 11 red, 13 green; 4 blue, 15 green, 4 red; 1 blue, 3 green, 17 red\nGame 11: 9 green, 3 blue, 2 red; 11 blue, 16 green, 5 red; 7 blue, 3 red, 5 green; 7 red, 8 green, 10 blue\nGame 12: 13 green, 2 red, 2 blue; 1 red, 6 green; 5 green, 3 red, 8 blue\nGame 13: 2 blue, 5 green; 2 blue, 2 green; 2 blue, 2 red, 4 green\nGame 14: 4 red, 2 green, 1 blue; 7 red, 1 green; 6 red, 18 green, 4 blue; 3 green, 1 blue\nGame 15: 2 blue, 5 green, 12 red; 13 red, 8 green; 10 blue, 6 red, 8 green; 9 blue, 7 red; 2 green, 15 red; 9 blue, 3 green, 14 red\nGame 16: 8 green, 11 blue, 14 red; 4 red, 8 green; 5 red, 4 blue, 3 green; 4 green, 13 blue, 6 red; 9 red, 8 blue, 11 green\nGame 17: 8 red, 6 green; 5 blue, 7 green; 10 red, 6 blue; 9 blue, 10 green, 7 red; 1 red, 3 green, 5 blue\nGame 18: 8 blue, 10 red; 6 red, 5 blue, 6 green; 16 green, 6 blue, 1 red; 16 red, 3 green, 5 blue\nGame 19: 2 green, 17 blue; 2 blue, 4 green, 7 red; 6 red, 12 blue; 6 blue, 5 red, 10 green\nGame 20: 4 green, 8 red, 9 blue; 6 blue, 4 green; 5 blue, 7 green, 9 red; 9 red, 9 blue, 6 green\nGame 21: 1 green, 11 red, 2 blue; 6 red, 7 blue; 5 red, 1 green; 2 red, 7 blue\nGame 22: 8 blue, 1 red, 4 green; 6 blue, 4 green, 14 red; 5 green, 8 red, 9 blue\nGame 23: 4 blue, 12 red, 1 green; 1 green, 10 blue; 11 red, 2 blue; 1 blue, 1 green\nGame 24: 5 blue, 1 green; 2 green, 2 blue, 4 red; 3 red, 5 blue\nGame 25: 13 blue, 5 green, 4 red; 5 red, 17 blue; 6 blue, 8 green, 1 red; 2 blue, 1 red, 8 green; 3 red, 3 green\nGame 26: 2 green, 9 red, 2 blue; 3 green, 19 red; 2 green, 16 red, 6 blue; 11 green, 4 red, 4 blue; 2 blue, 8 red, 13 green; 7 blue\nGame 27: 1 red, 17 green, 1 blue; 4 red, 8 green; 1 blue, 7 green, 7 red; 18 green, 2 red\nGame 28: 6 blue, 1 red; 2 blue, 1 red; 1 red, 1 green, 5 blue; 1 green; 1 green, 3 blue; 1 blue, 1 green\nGame 29: 15 blue, 8 red, 1 green; 6 red, 2 green, 17 blue; 13 blue, 12 red; 12 blue, 2 green, 12 red; 5 red, 14 blue\nGame 30: 4 blue, 6 green, 4 red; 3 blue, 2 green, 9 red; 5 green, 18 red; 9 blue, 16 red, 5 green\nGame 31: 6 blue, 7 green, 4 red; 8 green, 6 blue, 10 red; 6 red, 2 green, 2 blue; 2 green, 4 blue, 6 red; 2 red, 7 green; 7 red, 13 green, 2 blue\nGame 32: 5 blue; 2 green, 8 blue; 1 red, 6 blue, 2 green; 2 green, 11 blue\nGame 33: 1 red, 7 green, 17 blue; 1 red, 14 blue, 2 green; 13 blue\nGame 34: 12 red, 1 green, 1 blue; 11 red, 1 blue, 1 green; 16 red, 3 green; 9 red, 1 blue; 15 red, 2 blue; 1 green, 4 blue, 8 red\nGame 35: 6 blue, 13 red, 1 green; 8 red, 9 blue, 6 green; 12 red, 8 green\nGame 36: 5 blue, 3 red; 2 green, 3 red; 9 green, 6 red, 1 blue; 3 blue, 4 red, 9 green\nGame 37: 14 blue, 3 red; 2 green, 2 red, 8 blue; 11 blue, 5 red\nGame 38: 3 red, 18 green, 2 blue; 5 green, 5 red; 1 red, 12 green, 6 blue; 3 red, 5 blue, 1 green; 4 blue, 6 red, 17 green; 17 green, 6 blue, 3 red\nGame 39: 5 green, 13 blue, 1 red; 6 green, 1 red, 12 blue; 1 red, 2 green, 11 blue; 1 red, 2 green, 12 blue\nGame 40: 15 red; 14 red, 2 green, 4 blue; 13 red, 5 blue; 5 blue, 1 green, 18 red\nGame 41: 2 red, 15 green; 11 red, 6 green, 1" <> ...}
```

```elixir
defmodule Day2Part1 do
  defmodule Game do
    defstruct id: nil, max_red: 0, max_green: 0, max_blue: 0, valid: true
  end

  @max_red 12
  @max_green 13
  @max_blue 14

  def run(input) do
    input
    |> String.split("\n")
    |> Enum.map(&parse_game/1)
    |> Enum.map(&check_validity/1)
    |> Enum.filter(&(&1.valid == true))
    |> Enum.map(& &1.id)
    |> Enum.sum()
  end

  defp parse_game(line) do
    %{"id" => game_id, "rest" => rest} =
      Regex.named_captures(~r/Game (?<id>[\d]+): (?<rest>.*)/, line)

    game = %Game{id: String.to_integer(game_id)}

    shows = String.split(rest, ";")

    parsed =
      for show <- shows do
        colors = String.split(show, ", ")

        for c <- colors, into: %{} do
          %{"number" => number, "color" => color} =
            Regex.named_captures(~r/(?<number>[\d]+) (?<color>red|green|blue)/, c)

          {color, String.to_integer(number)}
        end
      end

    maximums =
      parsed
      |> Enum.reduce(%{}, fn map, acc ->
        Map.merge(acc, map, fn _k, v1, v2 ->
          Enum.max([v1, v2])
        end)
      end)

    %Game{
      game
      | max_red: Map.get(maximums, "red", 0),
        max_green: Map.get(maximums, "green", 0),
        max_blue: Map.get(maximums, "blue", 0)
    }
  end

  defp check_validity(game) do
    case game do
      %{max_red: max_red} when max_red > @max_red ->
        %Game{game | valid: false}

      %{max_green: max_green} when max_green > @max_green ->
        %Game{game | valid: false}

      %{max_blue: max_blue} when max_blue > @max_blue ->
        %Game{game | valid: false}

      _ ->
        game
    end
  end
end

Day2Part1.run(puzzle_input)
```

<!-- livebook:{"output":true} -->

```
2256
```

## Part 2

<!-- livebook:{"attrs":{"assign_to":"puzzle_input2","day":"2","session_secret":"AOC_SESSION","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input2} =
  KinoAOC.download_puzzle("2023", "2", System.fetch_env!("LB_AOC_SESSION"))
```

<!-- livebook:{"output":true} -->

```
{:ok,
 "Game 1: 14 green, 8 blue, 9 red; 5 blue, 4 green, 2 red; 4 red, 4 blue, 4 green; 1 blue, 3 green, 2 red; 10 red, 3 blue, 15 green; 2 red, 6 green, 3 blue\nGame 2: 1 red, 12 green, 2 blue; 2 green, 1 blue, 1 red; 4 green, 2 blue; 10 green, 3 blue; 4 green, 2 red, 2 blue\nGame 3: 16 red, 3 green; 7 green, 15 red, 3 blue; 4 green, 20 red, 1 blue; 12 red, 13 green, 1 blue; 2 green, 8 red, 1 blue; 16 red, 7 green\nGame 4: 3 red, 7 blue; 4 blue, 3 green; 19 blue, 1 red, 3 green; 16 blue, 4 red, 5 green; 1 red, 19 blue, 3 green\nGame 5: 7 blue, 4 red, 6 green; 2 red, 3 green, 6 blue; 11 blue, 1 red, 5 green\nGame 6: 7 red, 13 blue; 2 green, 9 red, 7 blue; 7 green, 3 red, 12 blue; 11 green, 3 blue, 4 red; 12 green, 10 blue\nGame 7: 2 green, 5 red; 4 green, 1 blue, 3 red; 1 blue, 1 green, 18 red; 4 green, 12 red, 1 blue\nGame 8: 12 red, 9 green, 11 blue; 13 blue, 1 red, 16 green; 12 blue, 12 green; 3 green, 7 blue, 2 red\nGame 9: 1 green, 9 red, 9 blue; 4 blue, 2 red; 17 red, 6 green, 3 blue; 3 green, 1 blue, 12 red\nGame 10: 2 blue, 11 red, 3 green; 4 blue, 11 red, 13 green; 4 blue, 15 green, 4 red; 1 blue, 3 green, 17 red\nGame 11: 9 green, 3 blue, 2 red; 11 blue, 16 green, 5 red; 7 blue, 3 red, 5 green; 7 red, 8 green, 10 blue\nGame 12: 13 green, 2 red, 2 blue; 1 red, 6 green; 5 green, 3 red, 8 blue\nGame 13: 2 blue, 5 green; 2 blue, 2 green; 2 blue, 2 red, 4 green\nGame 14: 4 red, 2 green, 1 blue; 7 red, 1 green; 6 red, 18 green, 4 blue; 3 green, 1 blue\nGame 15: 2 blue, 5 green, 12 red; 13 red, 8 green; 10 blue, 6 red, 8 green; 9 blue, 7 red; 2 green, 15 red; 9 blue, 3 green, 14 red\nGame 16: 8 green, 11 blue, 14 red; 4 red, 8 green; 5 red, 4 blue, 3 green; 4 green, 13 blue, 6 red; 9 red, 8 blue, 11 green\nGame 17: 8 red, 6 green; 5 blue, 7 green; 10 red, 6 blue; 9 blue, 10 green, 7 red; 1 red, 3 green, 5 blue\nGame 18: 8 blue, 10 red; 6 red, 5 blue, 6 green; 16 green, 6 blue, 1 red; 16 red, 3 green, 5 blue\nGame 19: 2 green, 17 blue; 2 blue, 4 green, 7 red; 6 red, 12 blue; 6 blue, 5 red, 10 green\nGame 20: 4 green, 8 red, 9 blue; 6 blue, 4 green; 5 blue, 7 green, 9 red; 9 red, 9 blue, 6 green\nGame 21: 1 green, 11 red, 2 blue; 6 red, 7 blue; 5 red, 1 green; 2 red, 7 blue\nGame 22: 8 blue, 1 red, 4 green; 6 blue, 4 green, 14 red; 5 green, 8 red, 9 blue\nGame 23: 4 blue, 12 red, 1 green; 1 green, 10 blue; 11 red, 2 blue; 1 blue, 1 green\nGame 24: 5 blue, 1 green; 2 green, 2 blue, 4 red; 3 red, 5 blue\nGame 25: 13 blue, 5 green, 4 red; 5 red, 17 blue; 6 blue, 8 green, 1 red; 2 blue, 1 red, 8 green; 3 red, 3 green\nGame 26: 2 green, 9 red, 2 blue; 3 green, 19 red; 2 green, 16 red, 6 blue; 11 green, 4 red, 4 blue; 2 blue, 8 red, 13 green; 7 blue\nGame 27: 1 red, 17 green, 1 blue; 4 red, 8 green; 1 blue, 7 green, 7 red; 18 green, 2 red\nGame 28: 6 blue, 1 red; 2 blue, 1 red; 1 red, 1 green, 5 blue; 1 green; 1 green, 3 blue; 1 blue, 1 green\nGame 29: 15 blue, 8 red, 1 green; 6 red, 2 green, 17 blue; 13 blue, 12 red; 12 blue, 2 green, 12 red; 5 red, 14 blue\nGame 30: 4 blue, 6 green, 4 red; 3 blue, 2 green, 9 red; 5 green, 18 red; 9 blue, 16 red, 5 green\nGame 31: 6 blue, 7 green, 4 red; 8 green, 6 blue, 10 red; 6 red, 2 green, 2 blue; 2 green, 4 blue, 6 red; 2 red, 7 green; 7 red, 13 green, 2 blue\nGame 32: 5 blue; 2 green, 8 blue; 1 red, 6 blue, 2 green; 2 green, 11 blue\nGame 33: 1 red, 7 green, 17 blue; 1 red, 14 blue, 2 green; 13 blue\nGame 34: 12 red, 1 green, 1 blue; 11 red, 1 blue, 1 green; 16 red, 3 green; 9 red, 1 blue; 15 red, 2 blue; 1 green, 4 blue, 8 red\nGame 35: 6 blue, 13 red, 1 green; 8 red, 9 blue, 6 green; 12 red, 8 green\nGame 36: 5 blue, 3 red; 2 green, 3 red; 9 green, 6 red, 1 blue; 3 blue, 4 red, 9 green\nGame 37: 14 blue, 3 red; 2 green, 2 red, 8 blue; 11 blue, 5 red\nGame 38: 3 red, 18 green, 2 blue; 5 green, 5 red; 1 red, 12 green, 6 blue; 3 red, 5 blue, 1 green; 4 blue, 6 red, 17 green; 17 green, 6 blue, 3 red\nGame 39: 5 green, 13 blue, 1 red; 6 green, 1 red, 12 blue; 1 red, 2 green, 11 blue; 1 red, 2 green, 12 blue\nGame 40: 15 red; 14 red, 2 green, 4 blue; 13 red, 5 blue; 5 blue, 1 green, 18 red\nGame 41: 2 red, 15 green; 11 red, 6 green, 1" <> ...}
```

```elixir
defmodule Day2Part2 do
  defmodule Game do
    defstruct id: nil, max_red: 0, max_green: 0, max_blue: 0, valid: true
  end

  def run(input) do
    input
    |> String.split("\n")
    |> Enum.map(&parse_game/1)
    |> Enum.map(&get_power/1)
    |> Enum.sum()
  end

  defp parse_game(line) do
    %{"id" => game_id, "rest" => rest} =
      Regex.named_captures(~r/Game (?<id>[\d]+): (?<rest>.*)/, line)

    game = %Game{id: String.to_integer(game_id)}

    shows = String.split(rest, ";")

    parsed =
      for show <- shows do
        colors = String.split(show, ", ")

        for c <- colors, into: %{} do
          %{"number" => number, "color" => color} =
            Regex.named_captures(~r/(?<number>[\d]+) (?<color>red|green|blue)/, c)

          {color, String.to_integer(number)}
        end
      end

    maximums =
      parsed
      |> Enum.reduce(%{}, fn map, acc ->
        Map.merge(acc, map, fn _k, v1, v2 ->
          Enum.max([v1, v2])
        end)
      end)

    %Game{
      game
      | max_red: Map.get(maximums, "red", 0),
        max_green: Map.get(maximums, "green", 0),
        max_blue: Map.get(maximums, "blue", 0)
    }
  end

  defp get_power(game) do
    game.max_red * game.max_green * game.max_blue
  end
end

Day2Part2.run(puzzle_input2)
```

<!-- livebook:{"output":true} -->

```
74229
```

<!-- livebook:{"offset":12240,"stamp":{"token":"XCP.f1PpIwyhaRz4uwEEHZMMxky3blbrQjxSR8bJ2szN8UWuk9d9oA5lvgM6NvqUvUKSP12lcxL_LfoWCr9-dyRQAxYpUxzWPjKHQllqQ2tzQH2CcjizFH8","version":2}} -->
